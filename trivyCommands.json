{
  "io01_ver": {
    "type": "run",
    "desc": "Show kadabra commands help",
    "cmd": "echo 2.0.0.01 Trivy"
  },
  "io01_update": {
    "type": "run",
    "desc": "Show kadabra commands help",
    "cmd": "sh ./io01_update.sh"
  },
  "trivy_fs": {
    "type": "run",
    "desc": "Scan local filesystem for vulnerabilities, secrets, misconfigs, licenses. Example: trivy fs /path/to/project",
    "cmd": "trivy fs"
  },
  "trivy_fs_file": {
    "type": "run",
    "desc": "Scan a single file on filesystem. Example: trivy fs /path/to/file",
    "cmd": "trivy fs "
  },
  "trivy_image": {
    "type": "run",
    "desc": "Scan container image for vulnerabilities & secrets. Example: trivy image python:3.4-alpine",
    "cmd": "trivy image"
  },
  "trivy_image_config": {
    "type": "run",
    "desc": "Scan container image metadata for misconfigurations. Example: trivy image --image-config-scanners config YOUR_IMAGE_NAME",
    "cmd": "trivy image --image-config-scanners config"
  },
  "trivy_image_misconfig": {
    "type": "run",
    "desc": "Run specific scanners on container image. Example: trivy image --scanners config YOUR_IMAGE_NAME",
    "cmd": "trivy image --scanners config"
  },
  "trivy_image_license": {
    "type": "run",
    "desc": "Scan container image for licenses. Example: trivy image --scanners license YOUR_IMAGE_NAME",
    "cmd": "trivy image --scanners license "
  },
  "trivy_repo": {
    "type": "run",
    "desc": "Scan code repository for vulnerabilities & secrets. Example: trivy repo YOUR_REPO_URL_OR_PATH",
    "cmd": "trivy repo "
  },
  "trivy_repo_config": {
    "type": "run",
    "desc": "Scan repository for misconfigurations. Example: trivy repo --scanners config YOUR_REPO_URL_OR_PATH",
    "cmd": "trivy repo --scanners config "
  },
  "trivy_repo_license": {
    "type": "run",
    "desc": "Scan repository for license issues. Example: trivy repo --scanners license YOUR_REPO_URL_OR_PATH",
    "cmd": "trivy repo --scanners license "
  },
  "trivy_vm_file": {
    "type": "run",
    "desc": "[EXPERIMENTAL] Scan local VM image for vulnerabilities. Example: trivy vm --scanners vuln disk.vmdk",
    "cmd": "trivy vm --scanners vuln"
  },
  "trivy_vm_ami": {
    "type": "run",
    "desc": "[EXPERIMENTAL] Scan AWS AMI for vulnerabilities. Example: trivy vm --scanners vuln ami:AMI_ID",
    "cmd": "trivy vm --scanners vuln"
  },
  "trivy_vm_ebs": {
    "type": "run",
    "desc": "[EXPERIMENTAL] Scan AWS EBS snapshot for vulnerabilities. Example: trivy vm ebs:EBS_SNAPSHOT_ID",
    "cmd": "trivy vm --scanners vuln ebs:EBS_SNAPSHOT_ID"
  },
  "trivy_aws": {
    "type": "run",
    "desc": "[EXPERIMENTAL] Scan AWS account for misconfigurations. Example: trivy aws --region us-east-1",
    "cmd": "trivy aws --region"
  },
  "trivy_aws_service": {
    "type": "run",
    "desc": "[EXPERIMENTAL] Scan specific AWS service. Example: trivy aws --region us-east-1 --service s3",
    "cmd": "trivy aws --region REGION --service"
  },
  "trivy_sbom": {
    "type": "run",
    "desc": "Scan SBOM file for vulnerabilities/licenses. Example: trivy sbom /path/to/sbom_file",
    "cmd": "trivy sbom /path/to/sbom_file"
  },
  "trivy_vuln_package_relationship": {
    "type": "run",
    "desc": "Filter vulnerability scan by package relationships. Example: trivy repo --pkg-relationships direct /path",
    "cmd": "trivy repo --pkg-relationships direct"
  },
  "trivy_fs_scan": {
    "type": "run",
    "desc": "Scan local filesystem for vulnerabilities, misconfigs, secrets, and licenses",
    "cmd": "trivy fs ./ --scanners vuln,secret,config,license --format table"
  },
  "trivy_image_scan": {
    "type": "run",
    "desc": "Scan a container image for vulnerabilities and metadata",
    "cmd": "trivy image <image_name> --format table"
  },
  "trivy_image_sbom": {
    "type": "run",
    "desc": "Generate CycloneDX SBOM for a container image",
    "cmd": "trivy image <image_name> --format cyclonedx --scanners vuln,license --output sbom.json"
  },
  "trivy_image_json": {
    "type": "run",
    "desc": "Scan container image with JSON output",
    "cmd": "trivy image <image_name> --format json --output report.json"
  },
  "trivy_repo_scan": {
    "type": "run",
    "desc": "Scan remote repository or GitHub repo for dependency vulnerabilities",
    "cmd": "trivy repo https://github.com/<user>/<repo>"
  },
  "trivy_config_scan": {
    "type": "run",
    "desc": "Scan Infrastructure-as-Code configs (Terraform/K8s/Dockerfiles)",
    "cmd": "trivy config ./"
  },
  "trivy_secret_scan": {
    "type": "run",
    "desc": "Scan files or directories for hardcoded secrets",
    "cmd": "trivy fs ./ --scanners secret"
  },
  "trivy_license_audit": {
    "type": "run",
    "desc": "Scan for open-source license issues in packages",
    "cmd": "trivy fs ./ --scanners license"
  },
  "trivy_kubernetes_cluster": {
    "type": "run",
    "desc": "Scan Kubernetes cluster using kubeconfig context",
    "cmd": "trivy k8s cluster"
  },
  "trivy_kubernetes_resources": {
    "type": "run",
    "desc": "Scan running Kubernetes resources (e.g., pods, deployments)",
    "cmd": "trivy k8s all"
  },
  "trivy_kubernetes_namespace": {
    "type": "run",
    "desc": "Scan specific Kubernetes namespace for vulnerabilities",
    "cmd": "trivy k8s --namespace <namespace>"
  },
  "trivy_db_update": {
    "type": "run",
    "desc": "Update Trivy vulnerability and rules database",
    "cmd": "trivy --download-db-only"
  },
  "trivy_clear_cache": {
    "type": "run",
    "desc": "Clear Trivy local vulnerability and cache data",
    "cmd": "trivy clear"
  },
  "trivy_version": {
    "type": "run",
    "desc": "Show Trivy version",
    "cmd": "trivy --version"
  },
  "trivy_help": {
    "type": "run",
    "desc": "Display help for all Trivy commands and flags",
    "cmd": "trivy --help"
  }
}
